//// [tests/cases/compiler/enforceReadonly1.ts] ////

=== enforceReadonly1.ts ===
// A read-only property is not assignable to a mutable property

function f1(mp: { x: string }, rp: { readonly x: string }, mx: { [x: string]: string }, rx: { readonly [x: string]: string }) {
>f1 : Symbol(f1, Decl(enforceReadonly1.ts, 0, 0))
>mp : Symbol(mp, Decl(enforceReadonly1.ts, 2, 12))
>x : Symbol(x, Decl(enforceReadonly1.ts, 2, 17))
>rp : Symbol(rp, Decl(enforceReadonly1.ts, 2, 30))
>x : Symbol(x, Decl(enforceReadonly1.ts, 2, 36))
>mx : Symbol(mx, Decl(enforceReadonly1.ts, 2, 58))
>x : Symbol(x, Decl(enforceReadonly1.ts, 2, 66))
>rx : Symbol(rx, Decl(enforceReadonly1.ts, 2, 87))
>x : Symbol(x, Decl(enforceReadonly1.ts, 2, 104))

    mp = rp;  // Error
>mp : Symbol(mp, Decl(enforceReadonly1.ts, 2, 12))
>rp : Symbol(rp, Decl(enforceReadonly1.ts, 2, 30))

    rp = mp;
>rp : Symbol(rp, Decl(enforceReadonly1.ts, 2, 30))
>mp : Symbol(mp, Decl(enforceReadonly1.ts, 2, 12))

    mx = mp;
>mx : Symbol(mx, Decl(enforceReadonly1.ts, 2, 58))
>mp : Symbol(mp, Decl(enforceReadonly1.ts, 2, 12))

    mx = rp;
>mx : Symbol(mx, Decl(enforceReadonly1.ts, 2, 58))
>rp : Symbol(rp, Decl(enforceReadonly1.ts, 2, 30))

    mx = rx;  // Error
>mx : Symbol(mx, Decl(enforceReadonly1.ts, 2, 58))
>rx : Symbol(rx, Decl(enforceReadonly1.ts, 2, 87))

    rx = mp;
>rx : Symbol(rx, Decl(enforceReadonly1.ts, 2, 87))
>mp : Symbol(mp, Decl(enforceReadonly1.ts, 2, 12))

    rx = rp;
>rx : Symbol(rx, Decl(enforceReadonly1.ts, 2, 87))
>rp : Symbol(rp, Decl(enforceReadonly1.ts, 2, 30))

    rx = mx;
>rx : Symbol(rx, Decl(enforceReadonly1.ts, 2, 87))
>mx : Symbol(mx, Decl(enforceReadonly1.ts, 2, 58))
}

type Mutable<T> = { -readonly [P in keyof T]: T[P] };
>Mutable : Symbol(Mutable, Decl(enforceReadonly1.ts, 11, 1))
>T : Symbol(T, Decl(enforceReadonly1.ts, 13, 13))
>P : Symbol(P, Decl(enforceReadonly1.ts, 13, 31))
>T : Symbol(T, Decl(enforceReadonly1.ts, 13, 13))
>T : Symbol(T, Decl(enforceReadonly1.ts, 13, 13))
>P : Symbol(P, Decl(enforceReadonly1.ts, 13, 31))

function f2<T>(mt: Mutable<T>, tt: T, rt: Readonly<T>) {
>f2 : Symbol(f2, Decl(enforceReadonly1.ts, 13, 53))
>T : Symbol(T, Decl(enforceReadonly1.ts, 15, 12))
>mt : Symbol(mt, Decl(enforceReadonly1.ts, 15, 15))
>Mutable : Symbol(Mutable, Decl(enforceReadonly1.ts, 11, 1))
>T : Symbol(T, Decl(enforceReadonly1.ts, 15, 12))
>tt : Symbol(tt, Decl(enforceReadonly1.ts, 15, 30))
>T : Symbol(T, Decl(enforceReadonly1.ts, 15, 12))
>rt : Symbol(rt, Decl(enforceReadonly1.ts, 15, 37))
>Readonly : Symbol(Readonly, Decl(lib.es5.d.ts, --, --))
>T : Symbol(T, Decl(enforceReadonly1.ts, 15, 12))

    mt = tt;  // Error
>mt : Symbol(mt, Decl(enforceReadonly1.ts, 15, 15))
>tt : Symbol(tt, Decl(enforceReadonly1.ts, 15, 30))

    mt = rt;  // Error
>mt : Symbol(mt, Decl(enforceReadonly1.ts, 15, 15))
>rt : Symbol(rt, Decl(enforceReadonly1.ts, 15, 37))

    tt = mt;
>tt : Symbol(tt, Decl(enforceReadonly1.ts, 15, 30))
>mt : Symbol(mt, Decl(enforceReadonly1.ts, 15, 15))

    tt = rt;  // Error
>tt : Symbol(tt, Decl(enforceReadonly1.ts, 15, 30))
>rt : Symbol(rt, Decl(enforceReadonly1.ts, 15, 37))

    rt = mt;
>rt : Symbol(rt, Decl(enforceReadonly1.ts, 15, 37))
>mt : Symbol(mt, Decl(enforceReadonly1.ts, 15, 15))

    rt = tt;
>rt : Symbol(rt, Decl(enforceReadonly1.ts, 15, 37))
>tt : Symbol(tt, Decl(enforceReadonly1.ts, 15, 30))
}

// A read-only property is assignable to a property declared as a method

function f3(m: { foo(): void }, p: { foo: () => void }, r: { readonly foo: () => void }) {
>f3 : Symbol(f3, Decl(enforceReadonly1.ts, 22, 1))
>m : Symbol(m, Decl(enforceReadonly1.ts, 26, 12))
>foo : Symbol(foo, Decl(enforceReadonly1.ts, 26, 16))
>p : Symbol(p, Decl(enforceReadonly1.ts, 26, 31))
>foo : Symbol(foo, Decl(enforceReadonly1.ts, 26, 36))
>r : Symbol(r, Decl(enforceReadonly1.ts, 26, 55))
>foo : Symbol(foo, Decl(enforceReadonly1.ts, 26, 60))

    m = r;
>m : Symbol(m, Decl(enforceReadonly1.ts, 26, 12))
>r : Symbol(r, Decl(enforceReadonly1.ts, 26, 55))

    p = r;  // Error
>p : Symbol(p, Decl(enforceReadonly1.ts, 26, 31))
>r : Symbol(r, Decl(enforceReadonly1.ts, 26, 55))
}

type Paths = string[] & { __brand__: "Paths" };
>Paths : Symbol(Paths, Decl(enforceReadonly1.ts, 29, 1))
>__brand__ : Symbol(__brand__, Decl(enforceReadonly1.ts, 31, 25))

function f4(rp: Readonly<Paths>, rs: Readonly<string[]>) {
>f4 : Symbol(f4, Decl(enforceReadonly1.ts, 31, 47))
>rp : Symbol(rp, Decl(enforceReadonly1.ts, 33, 12))
>Readonly : Symbol(Readonly, Decl(lib.es5.d.ts, --, --))
>Paths : Symbol(Paths, Decl(enforceReadonly1.ts, 29, 1))
>rs : Symbol(rs, Decl(enforceReadonly1.ts, 33, 32))
>Readonly : Symbol(Readonly, Decl(lib.es5.d.ts, --, --))

    rs = rp;
>rs : Symbol(rs, Decl(enforceReadonly1.ts, 33, 32))
>rp : Symbol(rp, Decl(enforceReadonly1.ts, 33, 12))
}

// A derived interface may not change property from mutable to read-only

interface B1 {
>B1 : Symbol(B1, Decl(enforceReadonly1.ts, 35, 1))

    x: number;
>x : Symbol(B1.x, Decl(enforceReadonly1.ts, 39, 14))
}

interface D1 extends B1 {  // Error
>D1 : Symbol(D1, Decl(enforceReadonly1.ts, 41, 1))
>B1 : Symbol(B1, Decl(enforceReadonly1.ts, 35, 1))

    readonly x: number;
>x : Symbol(D1.x, Decl(enforceReadonly1.ts, 43, 25))
}

interface B2 {
>B2 : Symbol(B2, Decl(enforceReadonly1.ts, 45, 1))

    get x(): number;
>x : Symbol(B2.x, Decl(enforceReadonly1.ts, 47, 14), Decl(enforceReadonly1.ts, 48, 20))

    set x(value: number);
>x : Symbol(B2.x, Decl(enforceReadonly1.ts, 47, 14), Decl(enforceReadonly1.ts, 48, 20))
>value : Symbol(value, Decl(enforceReadonly1.ts, 49, 10))
}

interface D2 extends B2 {  // Error
>D2 : Symbol(D2, Decl(enforceReadonly1.ts, 50, 1))
>B2 : Symbol(B2, Decl(enforceReadonly1.ts, 45, 1))

    get x(): number;
>x : Symbol(D2.x, Decl(enforceReadonly1.ts, 52, 25))
}

class B3 {
>B3 : Symbol(B3, Decl(enforceReadonly1.ts, 54, 1))

    x = 0;
>x : Symbol(B3.x, Decl(enforceReadonly1.ts, 56, 10))
}

class D3 extends B3 {  // Error
>D3 : Symbol(D3, Decl(enforceReadonly1.ts, 58, 1))
>B3 : Symbol(B3, Decl(enforceReadonly1.ts, 54, 1))

    readonly x = 1;
>x : Symbol(D3.x, Decl(enforceReadonly1.ts, 60, 21))
}

// A const assertion means "as const as possible" without violating constraints

const x1 = { a: "hello", b: 42 };
>x1 : Symbol(x1, Decl(enforceReadonly1.ts, 66, 5))
>a : Symbol(a, Decl(enforceReadonly1.ts, 66, 12))
>b : Symbol(b, Decl(enforceReadonly1.ts, 66, 24))

const x2 = { a: "hello", b: 42 } as const;
>x2 : Symbol(x2, Decl(enforceReadonly1.ts, 67, 5))
>a : Symbol(a, Decl(enforceReadonly1.ts, 67, 12))
>b : Symbol(b, Decl(enforceReadonly1.ts, 67, 24))
>const : Symbol(const)

const y1: { a: string, b: number } = { a: "hello", b: 42 };
>y1 : Symbol(y1, Decl(enforceReadonly1.ts, 69, 5))
>a : Symbol(a, Decl(enforceReadonly1.ts, 69, 11))
>b : Symbol(b, Decl(enforceReadonly1.ts, 69, 22))
>a : Symbol(a, Decl(enforceReadonly1.ts, 69, 38))
>b : Symbol(b, Decl(enforceReadonly1.ts, 69, 50))

const y2: { a: string, b: number } = { a: "hello", b: 42 } as const;
>y2 : Symbol(y2, Decl(enforceReadonly1.ts, 70, 5))
>a : Symbol(a, Decl(enforceReadonly1.ts, 70, 11))
>b : Symbol(b, Decl(enforceReadonly1.ts, 70, 22))
>a : Symbol(a, Decl(enforceReadonly1.ts, 70, 38))
>b : Symbol(b, Decl(enforceReadonly1.ts, 70, 50))
>const : Symbol(const)

const y3: { a: string, readonly b: number } = { a: "hello", b: 42 };
>y3 : Symbol(y3, Decl(enforceReadonly1.ts, 71, 5))
>a : Symbol(a, Decl(enforceReadonly1.ts, 71, 11))
>b : Symbol(b, Decl(enforceReadonly1.ts, 71, 22))
>a : Symbol(a, Decl(enforceReadonly1.ts, 71, 47))
>b : Symbol(b, Decl(enforceReadonly1.ts, 71, 59))

const y4: Record<string, unknown> = { a: 1, b: 2 } as const;
>y4 : Symbol(y4, Decl(enforceReadonly1.ts, 72, 5))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
>a : Symbol(a, Decl(enforceReadonly1.ts, 72, 37))
>b : Symbol(b, Decl(enforceReadonly1.ts, 72, 43))
>const : Symbol(const)

declare function f10<T>(obj: T): T;
>f10 : Symbol(f10, Decl(enforceReadonly1.ts, 72, 60))
>T : Symbol(T, Decl(enforceReadonly1.ts, 74, 21))
>obj : Symbol(obj, Decl(enforceReadonly1.ts, 74, 24))
>T : Symbol(T, Decl(enforceReadonly1.ts, 74, 21))
>T : Symbol(T, Decl(enforceReadonly1.ts, 74, 21))

declare function f11<const T>(obj: T): T;
>f11 : Symbol(f11, Decl(enforceReadonly1.ts, 74, 35))
>T : Symbol(T, Decl(enforceReadonly1.ts, 75, 21))
>obj : Symbol(obj, Decl(enforceReadonly1.ts, 75, 30))
>T : Symbol(T, Decl(enforceReadonly1.ts, 75, 21))
>T : Symbol(T, Decl(enforceReadonly1.ts, 75, 21))

declare function f12<const T extends { a: string, b: number }>(obj: T): T;
>f12 : Symbol(f12, Decl(enforceReadonly1.ts, 75, 41))
>T : Symbol(T, Decl(enforceReadonly1.ts, 76, 21))
>a : Symbol(a, Decl(enforceReadonly1.ts, 76, 38))
>b : Symbol(b, Decl(enforceReadonly1.ts, 76, 49))
>obj : Symbol(obj, Decl(enforceReadonly1.ts, 76, 63))
>T : Symbol(T, Decl(enforceReadonly1.ts, 76, 21))
>T : Symbol(T, Decl(enforceReadonly1.ts, 76, 21))

declare function f13<const T extends { a: string, readonly b: number }>(obj: T): T;
>f13 : Symbol(f13, Decl(enforceReadonly1.ts, 76, 74))
>T : Symbol(T, Decl(enforceReadonly1.ts, 77, 21))
>a : Symbol(a, Decl(enforceReadonly1.ts, 77, 38))
>b : Symbol(b, Decl(enforceReadonly1.ts, 77, 49))
>obj : Symbol(obj, Decl(enforceReadonly1.ts, 77, 72))
>T : Symbol(T, Decl(enforceReadonly1.ts, 77, 21))
>T : Symbol(T, Decl(enforceReadonly1.ts, 77, 21))

declare function f14<const T extends Record<string, unknown>>(obj: T): T;
>f14 : Symbol(f14, Decl(enforceReadonly1.ts, 77, 83))
>T : Symbol(T, Decl(enforceReadonly1.ts, 78, 21))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
>obj : Symbol(obj, Decl(enforceReadonly1.ts, 78, 62))
>T : Symbol(T, Decl(enforceReadonly1.ts, 78, 21))
>T : Symbol(T, Decl(enforceReadonly1.ts, 78, 21))

declare function f15<const T extends Readonly<Record<string, unknown>>>(obj: T): T;
>f15 : Symbol(f15, Decl(enforceReadonly1.ts, 78, 73))
>T : Symbol(T, Decl(enforceReadonly1.ts, 79, 21))
>Readonly : Symbol(Readonly, Decl(lib.es5.d.ts, --, --))
>Record : Symbol(Record, Decl(lib.es5.d.ts, --, --))
>obj : Symbol(obj, Decl(enforceReadonly1.ts, 79, 72))
>T : Symbol(T, Decl(enforceReadonly1.ts, 79, 21))
>T : Symbol(T, Decl(enforceReadonly1.ts, 79, 21))

f10({ a: "hello", b: 42 });  // { a: string; b: number; }
>f10 : Symbol(f10, Decl(enforceReadonly1.ts, 72, 60))
>a : Symbol(a, Decl(enforceReadonly1.ts, 81, 5))
>b : Symbol(b, Decl(enforceReadonly1.ts, 81, 17))

f11({ a: "hello", b: 42 });  // { readonly a: "hello"; readonly b: 42; }
>f11 : Symbol(f11, Decl(enforceReadonly1.ts, 74, 35))
>a : Symbol(a, Decl(enforceReadonly1.ts, 82, 5))
>b : Symbol(b, Decl(enforceReadonly1.ts, 82, 17))

f12({ a: "hello", b: 42 });  // { a: "hello"; b: 42; }
>f12 : Symbol(f12, Decl(enforceReadonly1.ts, 75, 41))
>a : Symbol(a, Decl(enforceReadonly1.ts, 83, 5))
>b : Symbol(b, Decl(enforceReadonly1.ts, 83, 17))

f13({ a: "hello", b: 42 });  // { a: "hello"; readonly b: 42; }
>f13 : Symbol(f13, Decl(enforceReadonly1.ts, 76, 74))
>a : Symbol(a, Decl(enforceReadonly1.ts, 84, 5))
>b : Symbol(b, Decl(enforceReadonly1.ts, 84, 17))

f14({ a: "hello", b: 42 });  // { a: "hello"; b: 42; }
>f14 : Symbol(f14, Decl(enforceReadonly1.ts, 77, 83))
>a : Symbol(a, Decl(enforceReadonly1.ts, 85, 5))
>b : Symbol(b, Decl(enforceReadonly1.ts, 85, 17))

f15({ a: "hello", b: 42 });  // { readonly a: "hello"; readonly b: 42; }
>f15 : Symbol(f15, Decl(enforceReadonly1.ts, 78, 73))
>a : Symbol(a, Decl(enforceReadonly1.ts, 86, 5))
>b : Symbol(b, Decl(enforceReadonly1.ts, 86, 17))

// https://github.com/microsoft/TypeScript/issues/13347

interface MutableValue<T> {
>MutableValue : Symbol(MutableValue, Decl(enforceReadonly1.ts, 86, 27))
>T : Symbol(T, Decl(enforceReadonly1.ts, 90, 23))

    value: T;
>value : Symbol(MutableValue.value, Decl(enforceReadonly1.ts, 90, 27))
>T : Symbol(T, Decl(enforceReadonly1.ts, 90, 23))
}

interface ImmutableValue<T> {
>ImmutableValue : Symbol(ImmutableValue, Decl(enforceReadonly1.ts, 92, 1))
>T : Symbol(T, Decl(enforceReadonly1.ts, 94, 25))

    readonly value: T;
>value : Symbol(ImmutableValue.value, Decl(enforceReadonly1.ts, 94, 29))
>T : Symbol(T, Decl(enforceReadonly1.ts, 94, 25))
}

let i: ImmutableValue<string> = { value: "hi" };
>i : Symbol(i, Decl(enforceReadonly1.ts, 98, 3))
>ImmutableValue : Symbol(ImmutableValue, Decl(enforceReadonly1.ts, 92, 1))
>value : Symbol(value, Decl(enforceReadonly1.ts, 98, 33))

i.value = "Excellent, I can't change it";  // Error
>i.value : Symbol(ImmutableValue.value, Decl(enforceReadonly1.ts, 94, 29))
>i : Symbol(i, Decl(enforceReadonly1.ts, 98, 3))
>value : Symbol(ImmutableValue.value, Decl(enforceReadonly1.ts, 94, 29))

let m: MutableValue<string> = i;  // Error
>m : Symbol(m, Decl(enforceReadonly1.ts, 101, 3))
>MutableValue : Symbol(MutableValue, Decl(enforceReadonly1.ts, 86, 27))
>i : Symbol(i, Decl(enforceReadonly1.ts, 98, 3))

m.value = "Oh dear, I can change it";
>m.value : Symbol(MutableValue.value, Decl(enforceReadonly1.ts, 90, 27))
>m : Symbol(m, Decl(enforceReadonly1.ts, 101, 3))
>value : Symbol(MutableValue.value, Decl(enforceReadonly1.ts, 90, 27))

